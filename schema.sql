-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.blockchains
(
    blockchain_id serial NOT NULL,
    name character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT blockchains_pkey PRIMARY KEY (blockchain_id)
);

CREATE TABLE IF NOT EXISTS public.options
(
    option_id serial NOT NULL,
    question_id integer NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    is_correct boolean NOT NULL,
    CONSTRAINT options_pkey PRIMARY KEY (option_id)
);

CREATE TABLE IF NOT EXISTS public.pictures
(
    picture_id serial NOT NULL,
    picture_url text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT pictures_pkey PRIMARY KEY (picture_id)
);

CREATE TABLE IF NOT EXISTS public.quest_progress
(
    wallet_id integer NOT NULL,
    quest_id integer NOT NULL,
    completion_date date,
    score integer,
    last_question_id integer,
    state integer,
    CONSTRAINT quest_progress_pkey PRIMARY KEY (quest_id, wallet_id)
);

CREATE TABLE IF NOT EXISTS public.questions
(
    question_id serial NOT NULL,
    quest_id integer NOT NULL,
    text text COLLATE pg_catalog."default" NOT NULL,
    type character varying(50) COLLATE pg_catalog."default" NOT NULL,
    points integer NOT NULL,
    CONSTRAINT questions_pkey PRIMARY KEY (question_id)
);

CREATE TABLE IF NOT EXISTS public.quests
(
    quest_id serial NOT NULL,
    creator_id integer,
    picture_id integer,
    blockchain_id integer,
    token_id integer,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default" NOT NULL,
    worth_knowledge integer NOT NULL,
    expiry_date date NOT NULL,
    participants_count integer DEFAULT 0,
    participants_limit integer NOT NULL,
    pool_amount numeric(10, 2) DEFAULT 0,
    max_points integer DEFAULT 0,
    required_minutes integer DEFAULT 5,
    approved boolean DEFAULT false,
    payout_date date,
    CONSTRAINT quests_pkey PRIMARY KEY (quest_id)
);

CREATE TABLE IF NOT EXISTS public.ratings
(
    user_id integer NOT NULL,
    quest_id integer NOT NULL,
    rating integer NOT NULL,
    CONSTRAINT rating_pk PRIMARY KEY (user_id, quest_id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    role_id serial NOT NULL,
    name character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (role_id)
);

CREATE TABLE IF NOT EXISTS public.similarities
(
    user_id_1 integer NOT NULL,
    user_id_2 integer NOT NULL,
    similarity_score double precision NOT NULL,
    CONSTRAINT similarities_pkey PRIMARY KEY (user_id_1, user_id_2)
);

CREATE TABLE IF NOT EXISTS public.tokens
(
    token_id serial NOT NULL,
    name character varying(10) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT tokens_pkey PRIMARY KEY (token_id)
);

CREATE TABLE IF NOT EXISTS public.user_responses
(
    user_id integer NOT NULL,
    option_id integer NOT NULL,
    CONSTRAINT user_responses_pk PRIMARY KEY (user_id, option_id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    role_id integer NOT NULL,
    avatar_id integer,
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    username character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    join_date date NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_key UNIQUE (email),
    CONSTRAINT users_username_key UNIQUE (username)
);

CREATE TABLE IF NOT EXISTS public.wallets
(
    wallet_id serial NOT NULL,
    blockchain_id integer NOT NULL,
    user_id integer,
    address character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT wallets_pkey PRIMARY KEY (wallet_id)
);

ALTER TABLE IF EXISTS public.options
    ADD CONSTRAINT options_questionid_fkey FOREIGN KEY (question_id)
    REFERENCES public.questions (question_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.quest_progress
    ADD CONSTRAINT fk_quest_id FOREIGN KEY (quest_id)
    REFERENCES public.quests (quest_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.quest_progress
    ADD CONSTRAINT fk_wallet_id FOREIGN KEY (wallet_id)
    REFERENCES public.wallets (wallet_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.questions
    ADD CONSTRAINT fk_quest_id FOREIGN KEY (quest_id)
    REFERENCES public.quests (quest_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.quests
    ADD CONSTRAINT fk_blockchain_id FOREIGN KEY (blockchain_id)
    REFERENCES public.blockchains (blockchain_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.quests
    ADD CONSTRAINT fk_creator_user FOREIGN KEY (creator_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.quests
    ADD CONSTRAINT fk_picture_id FOREIGN KEY (picture_id)
    REFERENCES public.pictures (picture_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.quests
    ADD CONSTRAINT fk_token_id FOREIGN KEY (token_id)
    REFERENCES public.tokens (token_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.ratings
    ADD CONSTRAINT fk_quest_id FOREIGN KEY (quest_id)
    REFERENCES public.quests (quest_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.ratings
    ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.similarities
    ADD CONSTRAINT fk_user_id_1 FOREIGN KEY (user_id_1)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.similarities
    ADD CONSTRAINT fk_user_id_2 FOREIGN KEY (user_id_2)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.user_responses
    ADD CONSTRAINT user_responses_option_id_fk FOREIGN KEY (option_id)
    REFERENCES public.options (option_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.user_responses
    ADD CONSTRAINT user_responses_user_id_fk FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT fk_picture_id FOREIGN KEY (avatar_id)
    REFERENCES public.pictures (picture_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT fk_role_id FOREIGN KEY (role_id)
    REFERENCES public.roles (role_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.wallets
    ADD CONSTRAINT fk_blockchain_id FOREIGN KEY (blockchain_id)
    REFERENCES public.blockchains (blockchain_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.wallets
    ADD CONSTRAINT fk_user_id FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;